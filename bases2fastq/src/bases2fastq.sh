#!/bin/bash
# bases2fastq-dx-test 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo -e "$(date) - Starting bases2fastq-dx"

    echo "b2f_run_dir: '$b2f_run_dir'"
    echo "b2f_container_url: '$b2f_container_url'"
    echo "b2f_container_tag: '$b2f_container_tag'"
    echo "b2f_args: '$b2f_args"
    echo "b2f_num_threads: '$b2f_num_threads"
    
    dx_project=`echo $b2f_run_dir | cut -f 1 -d :`
    b2f_run_directory=`echo $b2f_run_dir | cut -f 2 -d :`
    echo "dx_project: ${dx_project}"
    echo "b2f_run_directory: ${b2f_run_directory}"
    b2f_run_directory_name=`basename ${b2f_run_directory}`
    echo "b2f_run_directory_name: ${b2f_run_directory_name}"
    
    # download input dir, recursively
    mkdir -p run/
    echo "$(date) - dx download --lightweight -r ${b2f_run_dir} -o run/"
    dx download --lightweight -r ${b2f_run_dir} -o run/

    # download all inputss
    echo "$(date) - download complete"

    mkdir -p fastq/
    
    echo "$(date) - starting b2f"
    echo "docker run -v $(pwd)/:/data/ elembio/bases2fastq:${b2f_container_tag} bases2fastq --num-threads ${b2f_num_threads} --no-projects ${custom_manifest_option} ${b2f_args} /data/run/${b2f_run_directory_name} /data/fastq/"
    docker run -v $(pwd)/:/data/ elembio/bases2fastq:${b2f_container_tag} bases2fastq --num-threads ${b2f_num_threads} --no-projects ${custom_manifest_option} ${b2f_args} /data/run/${b2f_run_directory_name} /data/fastq/
    echo "$(date) - b2f complete"

    echo "$(date) - organzing outputs"

    mkdir -p out/.

    mkdir -p out/R1_fastq/bases2fastq/${b2f_run_directory_name}/
    for file in fastq/Samples/*/*_R1*fastq.gz; do [[ -e $file ]] && mv "$file" out/R1_fastq/bases2fastq/${b2f_run_directory_name}/.; done
    
    mkdir -p out/R2_fastq/bases2fastq/${b2f_run_directory_name}/
    for file in fastq/Samples/*/*_R2*fastq.gz; do [[ -e $file ]] && mv "$file" out/R2_fastq/bases2fastq/${b2f_run_directory_name}/.; done

    mkdir -p out/I1_fastq/bases2fastq/${b2f_run_directory_name}/
    for file in fastq/Samples/*/*_I1*fastq.gz; do [[ -e $file ]] && mv "$file" out/I1_fastq/bases2fastq/${b2f_run_directory_name}/.; done
    
    mkdir -p out/I2_fastq/bases2fastq/${b2f_run_directory_name}/
    for file in fastq/Samples/*/*_I2*fastq.gz; do [[ -e $file ]] && mv "$file" out/I2_fastq/bases2fastq/${b2f_run_directory_name}/.; done

    mkdir -p out/sample_stats/bases2fastq/${b2f_run_directory_name}/
    mv fastq/Samples/*/*_stats.json out/sample_stats/bases2fastq/${b2f_run_directory_name}/.
    
    mkdir -p out/run_stats/bases2fastq/${b2f_run_directory_name}/
    mv fastq/RunStats.json out/run_stats/bases2fastq/${b2f_run_directory_name}/.
    
    mkdir -p out/run_manifest_errors/bases2fastq/${b2f_run_directory_name}/
    for file in fastq/info/RunManifestErrors.json; do [[ -e $file ]] && mv "$file" out/run_manifest_errors/bases2fastq/${b2f_run_directory_name}/.; done
    
    mkdir -p out/run_manifest_csv/bases2fastq/${b2f_run_directory_name}/
    mv fastq/RunManifest.csv out/run_manifest_csv/bases2fastq/${b2f_run_directory_name}/.

    mkdir -p out/run_manifest_json/bases2fastq/${b2f_run_directory_name}/
    mv fastq/RunManifest.json out/run_manifest_json/bases2fastq/${b2f_run_directory_name}/.

    mkdir -p out/run_parameters_json/bases2fastq/${b2f_run_directory_name}/
    mv fastq/RunParameters.json out/run_parameters_json/bases2fastq/${b2f_run_directory_name}/.
    
    mkdir -p out/run_metrics/bases2fastq/${b2f_run_directory_name}/
    mv fastq/Metrics.csv out/run_metrics/bases2fastq/${b2f_run_directory_name}/.

    mkdir -p out/qc_html/bases2fastq/${b2f_run_directory_name}/
    for file in fastq/*.html; do [[ -e $file ]] && mv "$file" out/qc_html/bases2fastq/${b2f_run_directory_name}/.; done

    mkdir -p out/unassigned_sequences/bases2fastq/${b2f_run_directory_name}/
    mv fastq/UnassignedSequences.csv out/unassigned_sequences/bases2fastq/${b2f_run_directory_name}/.
    
    mkdir -p out/b2f_log/bases2fastq/${b2f_run_directory_name}/
    mv fastq/info/*.log out/b2f_log/bases2fastq/${b2f_run_directory_name}/.

    # upload all outputs
    echo "$(date) - uploading outputs"
    dx-upload-all-outputs --parallel
    echo "$(date) - upload complete"
}

